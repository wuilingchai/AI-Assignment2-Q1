import copy
import time

# initialize path cost
path_cost = -1;

# define identifiers for each character
CRIMINAL = 0
POLICEMAN = 1
FATHER = 2
MOTHER = 3
CHILD = 4
BOAT = 5

# define initial state
INITIAL_STATE = ["L", "L", "L", "L", "L", "L"]

# define criminal rule
def criminalRule(state):
    return state[POLICEMAN] == state[CRIMINAL] or (
        state[POLICEMAN] != state[CRIMINAL] 
        and state[MOTHER] != state[CRIMINAL] 
        and state[FATHER] != state[CRIMINAL]
    )

# define child rule
def childRule(state):
    return state[FATHER] == state[CHILD] or state[MOTHER] == state[CHILD]


# check the validity of each state
def validState(state):
    return criminalRule(state) and childRule(state)


# check goal state
def goalState(state):
    return state == ["R", "R", "R", "R", "R", "R"]


# generates all possible moves
def possibleMoves(state):
    for other in [CRIMINAL, POLICEMAN, FATHER, MOTHER, CHILD]:
        if state[FATHER] == state[other] == state[BOAT]:
            move = copy.deepcopy(state)
            move[FATHER] = "L" if state[FATHER] == "R" else "R"
            move[other] = "L" if state[other] == "R" else "R"
            move[BOAT] = "L" if state[BOAT] == "R" else "R"
            yield move

        if state[MOTHER] == state[other] == state[BOAT]:
            move = copy.deepcopy(state)
            move[MOTHER] = "L" if state[MOTHER] == "R" else "R"
            move[other] = "L" if state[other] == "R" else "R"
            move[BOAT] = "L" if state[BOAT] == "R" else "R"
            yield move

        if state[POLICEMAN] == state[other] == state[BOAT]:
            move = copy.deepcopy(state)
            move[POLICEMAN] = "L" if state[POLICEMAN] == "R" else "R"
            move[other] = "L" if state[other] == "R" else "R"
            move[BOAT] = "L" if state[BOAT] == "R" else "R"
            yield move


# get the valid moves
def validMoves(state_space):
    valid_list = []
    for state in state_space:
        if validState(state) and state not in valid_list:
            valid_list.append(state)
    return valid_list


# apply depth limited search, this function assures a solution will be found, using less time and memory
def dls(state, previous_states, max_depth):
    previous_states.append(state)

    if goalState(state):
        return previous_states

    if max_depth <= 0:
        return None

    for move in validMoves(possibleMoves(state)):
        if move not in previous_states:
            result = dls(move, previous_states, max_depth - 1)
            if result is not None:
                return result
            previous_states.pop()

    return None


# print one state
def display(state):
    global path_cost
    
    CHARACTERS = [
        "CRIMINAL",
        "POLICEMAN",
        "FATHER",
        "MOTHER",
        "CHILD",
    ]
    
    space = " " * 10
    plainText = "|| {} |                | {} ||"

    print("=" * 46)
    print(plainText.format(space, space))

    for i in range(0, 5):
        character = CHARACTERS[i] + " " * (10 - len(CHARACTERS[i]))

        if state[i] == "L":
            print(plainText.format(character, space))
        else:
            print(plainText.format(space, character))

        if i == 3:
            if state[5] == "R":
                print("||", space, "|           \\___/|", space, "||")
            else:
                print("||", space, "|\\___/           |", space, "||")

    print(plainText.format(space, space))
    print("=" * 46)
    
    # each action has a uniform cost of 1
    path_cost += 1

# print path 
def showPath(state_space, delay):
    for state in state_space:
        display(state)
        time.sleep(delay)



# main function
def main():

    state_space = dls(
        INITIAL_STATE, [], 30
    )

    showPath(state_space, 1.5)
    print("\nPath Cost: " + str(path_cost))
                

    

main()
